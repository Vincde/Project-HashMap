(()=>{const e=(e,n)=>({key:e,value:n,next:null}),n=(()=>{const n=new Array(16).fill(void 0),t=e=>{let t=0,l=0;for(let r=0;r<e.length;r++)t=31*t+e.charCodeAt(r),l=t%n.length;return l};return{bucket:n,hash:t,set:(l,r)=>{const u=r,o=l,i=t(l);let x=n[i];if(void 0===x)return x=e(o,u),void(n[i]=x);if(x.key!==o){for(;null!==x.next;)if(x=x.next,x.key===o)return void(x.value=u);x.next=e(o,u),x=0}else x.value=u},get:e=>{const l=t(e);let r=n[l];if(void 0===r)return null;if(r.key===e)return r.value;for(;null!==r.next;)if(r=r.next,r.key===e)return r.value;return null},has:e=>{const l=t(e);let r=n[l];if(void 0===r)return!1;if(r.key===e)return!0;for(;null!==r.next;)if(r=r.next,r.key===e)return!0;return!1},remove:e=>{const l=t(e);let r=n[l];if(void 0===r)return!1;if(r.key===e)return null!==r.next?(n[l]=n[l].next,r=r.next,!0):(n[l]=void 0,r=void 0,!0);for(;null!==r.next&&r.next.key!==e;)r=r.next;if(r.next.key!==e)return!1;let u=r.next;return null!==r.next.next?(r.next=u.next,u=null,!0):(r.next=null,u=null,!0)}}})();n.set("ciao","darling"),n.set("hello","erere"),n.set("Hello","trtr"),console.log(n.remove("hello")),console.log(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sVUFDdEJFLFFBQVFDLElBQUl0QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViZGV2LXRlbXBsYXRlLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vZGUgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICBjb25zdCBuZXh0ID0gbnVsbDtcbiAgcmV0dXJuIHsga2V5LCB2YWx1ZSwgbmV4dCB9O1xufTtcblxuY29uc3QgaGFzaE1hcCA9ICgpID0+IHtcbiAgY29uc3QgYnVja2V0ID0gbmV3IEFycmF5KDE2KS5maWxsKHVuZGVmaW5lZCk7XG5cbiAgY29uc3QgaGFzaCA9IChrZXkpID0+IHtcbiAgICBsZXQgaGFzaENvZGUgPSAwO1xuICAgIGxldCByZXMgPSAwO1xuXG4gICAgY29uc3QgcHJpbWVOdW1iZXIgPSAzMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgICAgaGFzaENvZGUgPSBwcmltZU51bWJlciAqIGhhc2hDb2RlICsga2V5LmNoYXJDb2RlQXQoaSk7XG4gICAgICByZXMgPSBoYXNoQ29kZSAlIGJ1Y2tldC5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBjb25zdCBzZXQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWU7XG4gICAgY29uc3QgbmV3S2V5ID0ga2V5O1xuICAgIGNvbnN0IGhhc2hLZXkgPSBoYXNoKGtleSk7XG4gICAgbGV0IHBvaW50ZXIgPSBidWNrZXRbaGFzaEtleV07XG5cbiAgICBpZiAocG9pbnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwb2ludGVyID0gbm9kZShuZXdLZXksIG5ld1ZhbHVlKTtcbiAgICAgIGJ1Y2tldFtoYXNoS2V5XSA9IHBvaW50ZXI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBvaW50ZXIua2V5ID09PSBuZXdLZXkpIHtcbiAgICAgIHBvaW50ZXIudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aGlsZSAocG9pbnRlci5uZXh0ICE9PSBudWxsKSB7XG4gICAgICBwb2ludGVyID0gcG9pbnRlci5uZXh0O1xuICAgICAgaWYgKHBvaW50ZXIua2V5ID09PSBuZXdLZXkpIHtcbiAgICAgICAgcG9pbnRlci52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgcG9pbnRlci5uZXh0ID0gbm9kZShuZXdLZXksIG5ld1ZhbHVlKTtcblxuICAgIHBvaW50ZXIgPSAwO1xuICB9O1xuXG4gIGNvbnN0IGdldCA9IChrZXkpID0+IHtcbiAgICBjb25zdCBoYXNoS2V5ID0gaGFzaChrZXkpO1xuXG4gICAgbGV0IHBvaW50ZXIgPSBidWNrZXRbaGFzaEtleV07XG4gICAgaWYgKHBvaW50ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHBvaW50ZXIua2V5ID09PSBrZXkpIHtcbiAgICAgIHJldHVybiBwb2ludGVyLnZhbHVlO1xuICAgIH1cbiAgICB3aGlsZSAocG9pbnRlci5uZXh0ICE9PSBudWxsKSB7XG4gICAgICBwb2ludGVyID0gcG9pbnRlci5uZXh0O1xuICAgICAgaWYgKHBvaW50ZXIua2V5ID09PSBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50ZXIudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgY29uc3QgaGFzID0gKGtleSkgPT4ge1xuICAgIGNvbnN0IGhhc2hLZXkgPSBoYXNoKGtleSk7XG5cbiAgICBsZXQgcG9pbnRlciA9IGJ1Y2tldFtoYXNoS2V5XTtcbiAgICBpZiAocG9pbnRlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHBvaW50ZXIua2V5ID09PSBrZXkpIHJldHVybiB0cnVlO1xuICAgIHdoaWxlIChwb2ludGVyLm5leHQgIT09IG51bGwpIHtcbiAgICAgIHBvaW50ZXIgPSBwb2ludGVyLm5leHQ7XG4gICAgICBpZiAocG9pbnRlci5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZSA9IChrZXkpID0+IHtcbiAgICBjb25zdCBoYXNoS2V5ID0gaGFzaChrZXkpO1xuXG4gICAgbGV0IHBvaW50ZXIgPSBidWNrZXRbaGFzaEtleV07XG4gICAgaWYgKHBvaW50ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwb2ludGVyLmtleSA9PT0ga2V5KSB7XG4gICAgICBpZiAocG9pbnRlci5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgIGJ1Y2tldFtoYXNoS2V5XSA9IGJ1Y2tldFtoYXNoS2V5XS5uZXh0O1xuICAgICAgICBwb2ludGVyID0gcG9pbnRlci5uZXh0O1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGJ1Y2tldFtoYXNoS2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgIHBvaW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAocG9pbnRlci5uZXh0ICE9PSBudWxsICYmIHBvaW50ZXIubmV4dC5rZXkgIT09IGtleSkge1xuICAgICAgcG9pbnRlciA9IHBvaW50ZXIubmV4dDtcbiAgICB9XG5cbiAgICBpZiAocG9pbnRlci5uZXh0LmtleSAhPT0ga2V5KSByZXR1cm4gZmFsc2U7XG5cbiAgICBsZXQgdG1wID0gcG9pbnRlci5uZXh0O1xuXG4gICAgaWYgKHBvaW50ZXIubmV4dC5uZXh0ICE9PSBudWxsKSB7XG4gICAgICBwb2ludGVyLm5leHQgPSB0bXAubmV4dDtcbiAgICAgIHRtcCA9IG51bGw7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwb2ludGVyLm5leHQgPSBudWxsO1xuICAgIHRtcCA9IG51bGw7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIHsgYnVja2V0LCBoYXNoLCBzZXQsIGdldCwgaGFzLCByZW1vdmUgfTtcbn07XG5cbmNvbnN0IGFhID0gaGFzaE1hcCgpO1xuXG5hYS5zZXQoXCJjaWFvXCIsIFwiZGFybGluZ1wiKTtcbmFhLnNldChcImhlbGxvXCIsIFwiZXJlcmVcIik7XG5hYS5zZXQoXCJIZWxsb1wiLCBcInRydHJcIik7XG5jb25zb2xlLmxvZyhhYS5yZW1vdmUoXCJoZWxsb1wiKSk7XG5jb25zb2xlLmxvZyhhYSk7XG4iXSwibmFtZXMiOlsibm9kZSIsImtleSIsInZhbHVlIiwibmV4dCIsImFhIiwiaGFzaE1hcCIsImJ1Y2tldCIsIkFycmF5IiwiZmlsbCIsInVuZGVmaW5lZCIsImhhc2giLCJoYXNoQ29kZSIsInJlcyIsImkiLCJsZW5ndGgiLCJjaGFyQ29kZUF0Iiwic2V0IiwibmV3VmFsdWUiLCJuZXdLZXkiLCJoYXNoS2V5IiwicG9pbnRlciIsImdldCIsImhhcyIsInJlbW92ZSIsInRtcCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9