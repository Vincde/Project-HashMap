(()=>{const e=(e,t)=>({key:e,value:t,next:null}),t=(()=>{let t=new Array(16).fill(void 0),l=.75;const n=e=>{let l=0,n=0;for(let r=0;r<e.length;r++)l=31*l+e.charCodeAt(r),n=l%t.length;return n},r=(r,o)=>{const i=o,x=r,f=n(r);let v=t[f];if(void 0===v)return v=e(x,i),t[f]=v,l=u()/t.length,void(l>.75&&s());if(v.key!==x){for(;null!==v.next;)if(v=v.next,v.key===x)return void(v.value=i);v.next=e(x,i),l=u()/t.length,l>.75&&s(),v=0}else v.value=i},u=()=>{let e=0;for(let l=0;l<t.length;l++){let n=t[l];if(void 0!==n)for(e+=1;null!==n.next;)n=n.next,e+=1}return e},o=()=>{for(let e=0;e<t.length;e++)void 0!==t[e]&&null!==t[e]&&(t[e].next=null,t[e]=void 0)},i=()=>{const e=[[]];let l=0;for(let n=0;n<t.length;n++){let r=t[n];if(null!=r)for(e[l]=[r.key,r.value],l+=1;null!==r.next;)r=r.next,e[l]=[r.key,r.value],l+=1}return e},s=()=>{const e=i();o(),t=new Array(32).fill(void 0),l=.75;for(let t=0;t<e.length;t++)r(e[t][0],e[t][1])};return{bucket:t,hash:n,set:r,get:e=>{const l=n(e);let r=t[l];if(void 0===r)return null;if(r.key===e)return r.value;for(;null!==r.next;)if(r=r.next,r.key===e)return r.value;return null},has:e=>{const l=n(e);let r=t[l];if(void 0===r)return!1;if(r.key===e)return!0;for(;null!==r.next;)if(r=r.next,r.key===e)return!0;return!1},remove:e=>{const r=n(e);let o=t[r];if(void 0===o)return!1;if(o.key===e)return null!==o.next?(t[r]=t[r].next,o=o.next,l=u()/t.length,!0):(t[r]=void 0,o=void 0,!0);for(;null!==o.next&&o.next.key!==e;)o=o.next;if(o.next.key!==e)return!1;let i=o.next;return null!==o.next.next?(o.next=i.next,i=null,l=u()/t.length,!0):(o.next=null,i=null,l=u()/t.length,!0)},length:u,clear:o,keys:()=>{const e=[];for(let l=0;l<t.length;l++){let n=t[l];if(null!=n)for(e.push(n.key);null!==n.next;)n=n.next,e.push(n.key)}return e},values:()=>{const e=[];for(let l=0;l<t.length;l++){let n=t[l];if(null!=n)for(e.push(n.value);null!==n.next;)n=n.next,e.push(n.value)}return e},entries:i,rehashing:s}})();t.set("ciao","darling"),t.set("hello","erere"),t.set("Hello","trtr"),t.set("hEllO","ilovepotatoes"),t.set("iloveu","234"),t.set("sdkjsefois","22334"),t.set("qwe","23674"),t.set("uuuu","237894"),t.set("iiii","2348989"),t.set("aaaau","234234"),t.set("zzzzu","23411"),t.set("ixxxxxveu","234444"),t.set("qqqqqqq","23422"),t.set("rtyryrty","23422"),t.set("yuiyuiy","23422"),t.set("iopiop","23422"),console.log(t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,