(()=>{"use strict";var t={d:(e,n)=>{for(var u in n)t.o(n,u)&&!t.o(e,u)&&Object.defineProperty(e,u,{enumerable:!0,get:n[u]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{A:()=>e});const e=function(t){return{key:t,value:arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,next:null}},n=new class{constructor(){this.bucket=[];for(let t=0;t<16;t++)this.bucket[t]=void 0}hash(t){let e=0,n=0;for(let u=0;u<t.length;u++)e=31*e+t.charCodeAt(u),n=e%this.bucket.length;return n}set(t){const n=this.hash(t);if(void 0===this.bucket[n])this.bucket[n]=e(t);else if(this.bucket[n].key===t)this.bucket[n].key=t;else{let u=this.bucket[n];for(;null!==u.next;)if(u=u.next,u.key===t)return void(u.key=t);u.next=e(t)}}get(t){const e=this.hash(t);if(null===this.bucket[e]||void 0===this.bucket[e])return!1;if(this.bucket[e].key===t)return t;let n=this.bucket[e];for(;null!==n.next;)if(n=n.next,n.key===t)return t;return null}has(t){const e=this.hash(t);if(null===this.bucket[e]||void 0===this.bucket[e])return!1;if(this.bucket[e].key===t)return!0;let n=this.bucket[e];for(;null!==n.next;)if(n=n.next,n.key===t)return!0;return!1}remove(t){const e=this.hash(t);let n=this.bucket[e];if(null===this.bucket[e]||void 0===this.bucket[e])return!1;if(this.bucket[e].key===t)this.bucket[e]=n.next,n.next=null;else{for(;null!==n.next&&n.next.key!==t;)n=n.next;if(n.next.key!==t)return null;if(null===n.next.next)return n.next=null,!0;n.next=n.next.next}return null}length(){let t=this.bucket,e=0;for(let n=0;n<this.bucket.length;n++)if(t=this.bucket[n],void 0!==t)for(e+=1;null!==t.next;)t=t.next,e+=1;return e}clear(){const t=this.bucket;for(let e=0;e<t.length;e++)t[e]=void 0}keys(){const t=[];let e;for(let n=0;n<this.bucket.length;n++)if(e=this.bucket[n],void 0!==e)for(t.push(e.key);null!==e.next;)e=e.next,t.push(e.key);return t}entries(){const t=[[]];let e,n=0;for(let u=0;u<this.bucket.length;u++)if(e=this.bucket[u],void 0!==e)for(t[n]=[e.key,null],n+=1;null!==e.next;)e=e.next,t[n]=[e.key,null],n+=1;return t}};n.set("ciao"),n.set("ciao"),n.set("Ciao"),n.set("CiAo"),n.set("america"),n.set("olanda"),console.log(n.entries())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,