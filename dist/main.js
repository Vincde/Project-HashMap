(()=>{"use strict";var t={d:(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{A:()=>e});const e=function(t){return{key:t,value:arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,next:null}},n=new class{constructor(){this.bucket=[];for(let t=0;t<16;t++)this.bucket[t]=void 0}hash(t){let e=0,n=0;for(let i=0;i<t.length;i++)e=31*e+t.charCodeAt(i),n=e%this.bucket.length;return n}set(t){const n=this.hash(t);if(void 0===this.bucket[n])this.bucket[n]=e(t);else if(this.bucket[n].key===t)this.bucket[n].key=t;else{let i=this.bucket[n];for(;null!==i.next;)if(i=i.next,i.key===t)return void(i.key=t);i.next=e(t)}}get(t){const e=this.hash(t);if(null===this.bucket[e]||void 0===this.bucket[e])return!1;if(this.bucket[e].key===t)return t;let n=this.bucket[e];for(;null!==n.next;)if(n=n.next,n.key===t)return t;return null}has(t){const e=this.hash(t);if(null===this.bucket[e]||void 0===this.bucket[e])return!1;if(this.bucket[e].key===t)return!0;let n=this.bucket[e];for(;null!==n.next;)if(n=n.next,n.key===t)return!0;return!1}remove(t){const e=this.hash(t);let n=this.bucket[e];if(null===this.bucket[e]||void 0===this.bucket[e])return!1;if(this.bucket[e].key===t)this.bucket[e]=n.next,n.next=null;else{for(;null!==n.next&&n.next.key!==t;)n=n.next;if(n.next.key!==t)return null;if(null===n.next.next)return n.next=null,!0;n.next=n.next.next}return null}};n.set("ciao"),n.set("ciao"),n.set("Ciao"),n.set("CiAo"),n.set("america"),n.set("olanda"),n.remove("ciao"),console.log(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,